<script type="text/javascript">
function mLine(divId) {

  Highcharts.setOptions({
    global: {
      timezoneOffset: -8*60
    }
  });
  var result = <%=raw @diamond_history_prices.to_json %>
  console.log(result)
  var $reporting = $("#report");
  var mouseX;
  var open = <%=@sale_diamond.yesterday_close_pirce%>  //开盘价
  console.log(open)
  var minTime,midTime,maxTime; //每日分时图起始时间、中点、终止时间

  minTime=<%=(Time.now.at_beginning_of_day + 9.5 * 3600).to_i * 1000%>;
  midTime=<%=(Time.now.at_beginning_of_day + 11.5 * 3600).to_i * 1000%>;
  maxTime=<%=(Time.now.at_beginning_of_day + 15 * 3600).to_i * 1000%>;


/*  var minPrice,maxPrice; //开盘价、收盘价、最低价、最高价
  minPrice = <%=@sale_diamond.opening_price * 0.9%>;
  maxPrice = <%=@sale_diamond.opening_price * 1.1%>;
  console.log(minPrice)
  console.log(maxPrice)*/



  var maxY,minY,halfMaxY,halfMinY;   //y轴最大刻度值，y轴最小刻度值，1/2最大极值，1/2最小极值


  //这一部分判断已有现价集合中最大值和最小值
  var minPrice,maxPrice; //最高价、最低价
  var allPrice=[]; //现价集合数组

  for(var i=0;i<result[0].length;i++){
    if(result[0][i][1] != undefined){
      allPrice.push(result[0][i][1])
    }
  }

  maxPrice = Math.max.apply(null, allPrice)
  minPrice = Math.min.apply(null, allPrice)
  var maxY,minY;   //y轴最大刻度值，y轴最小刻度值
  if(maxPrice-open > open-minPrice){
    maxY = maxPrice;
    minY = open - (maxY - open);
  }else if(maxPrice-open <= open-minPrice){
    minY = minPrice;
    maxY = open + (open - minPrice)
  }
 

  var linestep = (open-minY)/2 //刻度线和刻度线之间的距离，因为scaleRatio算出来有除不尽，算的不准
  var scaleRatio = (maxY - minY)/5;   //y轴刻度值比例，把y轴分成n等分，没份为scaleRatio
  // var scaleRatio = Math.ceil((maxY - minY)/4);   //y轴刻度值比例
  // var scaleRatio = Math.floor((maxY - minY)/4);   //y轴刻度值比例

  console.log("open：" + open)
  console.log("allPrice：" + allPrice)
  console.log("maxPrice：" + maxPrice)
  console.log("minPrice：" + minPrice)
  console.log("maxY：" + maxY)
  console.log("minY：" + minY)
  console.log("scaleRatio：" + scaleRatio)
  console.log(result)

  var data = {}
  var mychart = Highcharts.StockChart({
    chart: {
      margin: [-10,60,30,60],
      panning: true,
      zoomType: null,
      pinchType: null,
      type:'spline', // 让线条变得圆滑
      renderTo: divId,
      backgroundColor: '#1E1E26',
      events: {
        load: function () {
          // set up the updating of the chart each second
          var series0 = this.series[0];
          var series1 = this.series[1];

          // var series = this.series[0];

          setInterval(function () {
            $.ajax({
              type: "get",
              url: "/h5/sale_diamonds/<%=@sale_diamond.exchange_code%>/diamond_history_price",
              success: function(res){
                demoData = res.diamond_history_prices
                $.each(res["diamond_history_prices"][0], function(index, d){
                  if(data[d[0]] == null && d[1] != null){
                    data[d[0]] = 1
                    series0.addPoint([d[0], d[1][0]], false, false);


                    // 当前点大于等于或小于等于y轴极值是更新y轴极值及刻度比例
                    if(d[1][0] >= maxY || d[1][0] <= minY) {
                      if(d[1][0] >= maxY){
                        maxY = d[1][0]
                        minY= open-(maxY-open)
                      }else if(d[1][0]<minY){
                        minY = d[1][0]
                        maxY = open+(open-d[1][0])
                      }
                        // 重置坐标轴刻度比例
                        // 更新变化了的变量
                        linestep = (open-minY)/2 
                        scaleRatio = (maxY-minY)/5
                        mychart.yAxis[0].update({
                          tickInterval: scaleRatio, //刻度比例
                          max: maxY,  // 定义Y轴 最大值
                          min: minY,  // 定义最小值
                          tickPositioner: function () {
                            return [minY, minY+linestep, open, open+linestep,maxY, maxY+linestep]  //9:30,11:30,13:00
                          },
                        });
                        mychart.yAxis[1].update({
                          tickInterval: scaleRatio,  //刻度比例
                          max: maxY,  // 定义Y轴 最大值
                          min: minY,  // 定义最小值
                          tickPositioner: function () {
                            return [minY, minY+linestep, open, open+linestep,maxY, maxY+linestep]  //9:30,11:30,13:00
                          },
                        });
                    }

                  }
                })
                $.each(res["diamond_history_prices"][1], function(index, d){
                  if(data[d[0]] == null && d[1] != null){
                    data[d[0]] = 1
                    series1.addPoint([d[0], d[1][1]], false, false);


    
                  }
                })





                mychart.redraw();
              }
            })




          }, 30000);
        }
      }
    },
    plotOptions: {
      series: {
        states: {
          hover: {
            enabled: false,
            lineWidth: 0
          }
        },
        dataGrouping: { //关闭数据分组，解决大量数据无法全部显示点的问题
           forced: true,
           units: [
               ['minute', [1]]
           ]
        }
      }
    },
    rangeSelector: {
      enabled: false  //隐藏左上角范围选择器
    },
    scrollbar: {
      enabled: false  //隐藏滚动条
    },
    navigation: {
      buttonOptions: {
        enabled: false  //隐藏顶部导航条
      }
    },
    navigator: {
      enabled: false    //隐藏底部范围选择
    },
    credits: {
      enabled: false //隐藏highchart.com字样
    },
    xAxis: {
      crosshair: {     //鼠标经过出现十字线
        dashStyle: 'Solid',   //十字线样式,默认是Solid
        snap: true,  //十字线是否跟随线上的点
      },
      min: minTime, //1489023000000,
      max: maxTime, //1489042800000,
      type: 'datetime',
      tickLength: 0,//X轴下标长度
      lineWidth:1,  //x轴坐标轴宽度
      lineColor:"#564e68",  //x轴坐标轴颜色
      labels: {
        x: 0,
        y: 15,
        formatter: function () {
          if (this.value === midTime) {  //11:30 -- 1489030200000
            return '<span style="color:#fff">'+ '11:30/13:00' +'</span>';
          }
            return '<span style="color:#fff">'+ Highcharts.dateFormat("%H:%M", this.value) +'</span>';
        },
      },
      tickPositioner: function () {
        return [minTime, midTime, maxTime]  //9:30,11:30,13:00
      },

    },
    yAxis: [{
      title: {
        text: ''
      },
      crosshair: {     //鼠标经过出现十字线
        dashStyle: 'Solid',   //十字线样式,默认是Solid
        snap: true,  //十字线是否跟随线上的点
      },
      opposite: false,
      lineWidth: 0,//Y轴边缘线条粗细
      gridLineColor: '#292931', //横线颜色
      gridLineWidth: 0.8, //刻度行线透明度
      gridLineDashStyle: 'longdash',
      tickInterval: scaleRatio,  //刻度比例
      max: maxY,  // 定义Y轴 最大值
      min: minY,  // 定义最小值
      labels: {
        align: "left",
        x: -50,
        y: 5,
        formatter: function () {
          var a = ( this.value - open ) / this.value
          if (this.value > open) {
            return '<span style="color: #E91D25">' + (this.value).toFixed(2) + '</span>';
          } else if (this.value < open) {
            if (this.value === minY) {
              // return '<span style="color: #fff">' + '' + '</span>';
            }
            return '<span style="color: #18EAAB">' + (this.value).toFixed(2) + '</span>';
          } else if (this.value === open) {
            return '<span style="color: #fff">' + open.toFixed(2) + '</span>';
          };


          // return (this.value > 0 ? ' <span style="color: red">' : '<span style="color: green">') + this.value + '</span>';
        }
      },
      tickPositioner: function () {
        return [minY, minY+linestep, open, open+linestep,maxY, maxY+linestep]  //9:30,11:30,13:00
      },
    }, {
      title: {
        text: ''    //右侧Y轴名字
      },
      opposite: true,
      lineWidth: 0,//Y轴边缘线条粗细
      gridLineColor: '#292931', //横线颜色
      gridLineWidth: 0.8, //刻度行线透明度
      // data:demoData,
      gridLineWidth: 0,
      tickInterval: scaleRatio,  //刻度比例
      max: maxY,  // 定义Y轴 最大值
      min: minY,  // 定义最小值
      labels: {
        align: "right",
        x: 50,
        y: 5,
        formatter: function () {
          if (this.value > open) {
            return '<span style="color: #E91D25">' + ((this.value-open) / open * 100).toFixed(2) + '% </span>';
          } else if (this.value < open) {
            if (this.value === minY) {
              // return '<span style="color: #fff">' + '' + '</span>';
            }
            return '<span style="color: #18EAAB">' + ((this.value-open) / open * 100).toFixed(2) + '% </span>';
          } else if (this.value === open) {
            return '<span style="color: #fff">' + '' + '0.00% </span>';
          }

          // return (this.value > 0 ? ' <span style="color: red">' : '<span style="color: green">') + this.value + '% </span>';
        }
      },
      tickPositioner: function () {
        return [minY, minY+linestep, open, open+linestep,maxY, maxY+linestep]  //9:30,11:30,13:00
      },
    }],

    series: [{
      name: 'GOOGL',
      data: result[0],
      color: '#fff', //线条颜色
      lineWidth: 1, //曲线线条粗细
      yAxis: 0,
      marker: {
        enabled: false,  //是否在点出突出画一个圆点
        states: {
          hover: {
            enabled: false
          }
        }
      }
    }, {
      name: 'GOOGL',
      data: result[1],
      color: '#E1B91B', //线条颜色
      lineWidth: 1, //曲线线条粗细
      yAxis: 0,
      marker: {
        enabled: false,  //是否在点出突出画一个圆点
        states: {
          hover: {
            enabled: false
          }
        }
      }
    }],
    tooltip: {
      positioner: function () { //设置tips显示的相对位置
        var halfWidth = this.chart.chartWidth / 2;//chart宽度
        var width = this.chart.chartWidth - 141;
        var height = this.chart.chartHeight / 5 - 30;//chart高度
        if (mouseX < halfWidth) {
          return {x: width, y: height};
        } else {
          return {x: 8, y: height};
        }
      },
      shared: true,
      useHTML: true,
      shadow: false,
      // borderColor: "rgba(255, 255, 255, 0)",
      // backgroundColor: "rgba(255, 255, 255, 0)",
      borderColor: '#666',
      valueDecimals: 2,
      formatter: function () {
        mouseX = this.points[0].point.plotX
        console.log(mouseX)
        var time, cprice,aprice,Range, z, o = this;
        //当前时间，当前价，均价，涨幅
        console.log(this.points)
        a = this.points[0].y
        b = this.points[1].y

        time = Highcharts.dateFormat("%Y-%m-%d %H:%M", this.x);   //当前点的时间
        cprice = "现价：" + '<span style="color:red;">' + a.toFixed(2) + '</span>';
        aprice = "均价：" + '<span style="color:red;">' + b.toFixed(2) + '</span>'
        if (a < open) {
          cprice = "现价：" + '<span style="color:green;">' + a.toFixed(2) + '</span>';
        }
        if (b < open) {
          aprice = "均价：" + '<span style="color:green;">' + b.toFixed(2) + '</span>';
        }
        if(a == open){
          cprice = "现价：" + '<span style="color:gray;">' + a.toFixed(2) + '</span>';
        }
        if(b == open){
          aprice = "均价：" + '<span style="color:gray;">' + b.toFixed(2) + '</span>';
        }
        $reporting.html("b" + time + 'b' + cprice + ' ' + aprice )
        return  '<b>' + time + '</b>' + '<br>' + cprice + '<br>' + aprice ;
      }
    }
  });
}
</script>
